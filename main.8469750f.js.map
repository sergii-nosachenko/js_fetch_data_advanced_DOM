{"version":3,"sources":["scripts/main.js"],"names":["apiUrl","request","endpoint","params","fetch","then","response","ok","json","Promise","reject","Error","status","statusText","getPhones","getDetails","phoneId","getPhonesDetails","phones","getDetailsPromises","forEach","id","push","allSettled","getDetailsOrdered","resultsOrdered","resolve","details","catch","getFirstReceivedDetails","race","getAllSuccessfulDetails","results","filter","result","map","value","getThreeFastestDetails","slice","addPhonesList","title","className","phonesList","waitingMessage","remove","container","document","createElement","innerHTML","list","append","body","phone","insertAdjacentHTML","name","toUpperCase","textContent","firstPhone","error","alert","message","allPhones","console","log"],"mappings":";AAAA,aAEA,IAAMA,EAAS,4DAGTC,EAAU,SAACC,GAAUC,IAAAA,EAAS,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAC3BC,OAAAA,MAAMJ,EAASE,EAAUC,GAC7BE,KAAK,SAAAC,GACA,OAACA,EAASC,GAQPD,EAASE,OAPPC,QAAQC,OACb,IAAIC,MACAL,iBAAAA,OAAAA,EAASM,OAAWN,MAAAA,OAAAA,EAASO,WAF5B,qBAYTC,EAAY,WACTb,OAAAA,EAAQ,iBAIXc,EAAa,SAACC,GACXf,OAAAA,EAAmBe,WAAAA,OAAAA,EAA1B,WAIIC,EAAmB,WAChBH,OAAAA,IACJT,KAAK,SAAAa,GACEC,IAAAA,EAAqB,GAMpBV,OAJPS,EAAOE,QAAQ,SAAA,GAAGC,IAAAA,EAAAA,EAAAA,GAChBF,OAAAA,EAAmBG,KAAKP,EAAWM,MAG9BZ,QAAQc,WAAWJ,MAM1BK,EAAoB,SAACR,EAASS,GAC3B,OAAA,IAAIhB,QAAQ,SAACiB,EAAShB,GAC3BK,EAAWC,GACRX,KAAK,SAAAsB,GACJF,EAAeH,KAAKK,GACpBD,EAAQC,KAETC,MAAMlB,MAKPmB,EAA0B,WACvBf,OAAAA,IACJT,KAAK,SAAAa,GACEC,IAAAA,EAAqB,GAMpBV,OAJPS,EAAOE,QAAQ,SAAA,GAAGC,IAAAA,EAAAA,EAAAA,GAChBF,OAAAA,EAAmBG,KAAKP,EAAWM,MAG9BZ,QAAQqB,KAAKX,MAKpBY,EAA0B,WACvBd,OAAAA,IACJZ,KAAK,SAAA2B,GACJA,OAAAA,EACGC,OAAO,SAAAC,GAAUA,MAAkB,cAAlBA,EAAOtB,SACxBuB,IAAI,SAAA,GAAeC,OAAZA,EAAAA,WAKVC,EAAyB,WACtB,OAAA,IAAI5B,QAAQ,SAACiB,EAAShB,GAC3BI,IACGT,KAAK,SAAAa,GACEC,IAAAA,EAAqB,GACrBM,EAAiB,GAEvBP,EAAOE,QAAQ,SAAA,GAAGC,IAAAA,EAAAA,EAAAA,GAChBF,OAAAA,EAAmBG,KAAKE,EAAkBH,EAAII,MAGhDhB,QACGc,WAAWJ,GACXd,KAAK,WAAMqB,OAAAA,EAAQD,EAAea,MAAM,EAAG,MAC3CV,MAAMlB,QAMX6B,EAAgB,SAACC,EAAOC,EAAWC,GACvCC,EAAeC,SAETC,IAAAA,EAAYC,SAASC,cAAc,OAEzCF,EAAUJ,UAAYA,EACtBI,EAAUG,UAAmBR,OAAAA,OAAAA,EAA7B,SAEMS,IAAAA,EAAOH,SAASC,cAAc,MAEpCF,EAAUK,OAAOD,GACjBH,SAASK,KAAKD,OAAOL,GAErBH,EAAWtB,QAAQ,SAAAgC,GACjBH,EAAKI,mBAAmB,YAChBD,eAAAA,OAAAA,EAAME,KAAqBF,kBAAAA,OAAAA,EAAM/B,GAAGkC,cAD5C,0BAOEZ,EAAiBG,SAASC,cAAc,KAE9CJ,EAAea,YAAc,qBAC7BV,SAASK,KAAKD,OAAOP,GAGrBd,IACGxB,KAAK,SAAAoD,GACJlB,EACE,iBACA,iBACA,CAACkB,MAGJ7B,MAAM,SAAA8B,GACLC,MAAMD,EAAME,WAIhB7B,IACG1B,KAAK,SAAAwD,GACJtB,EACE,iBACA,iBACAsB,KAGHjC,MAAM,SAAA8B,GACLC,MAAMD,EAAME,WAIhBvB,IAEGhC,KAAK,SAAAa,GAAU4C,OAAAA,QAAQC,IAAI7C","file":"main.8469750f.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst apiUrl = 'https://mate-academy.github.io/phone-catalogue-static/api';\n\n// General API Call function\nconst request = (endpoint, params = {}) => {\n  return fetch(apiUrl + endpoint, params)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(`\n            ${response.status}: ${response.statusText}\n          `)\n        );\n      }\n\n      return response.json();\n    });\n};\n\n// Gets phones list from API\nconst getPhones = () => {\n  return request('/phones.json');\n};\n\n// Gets phone's details by id from API\nconst getDetails = (phoneId) => {\n  return request(`/phones/${phoneId}.json`);\n};\n\n// Gets all phones' details by ids from API\nconst getPhonesDetails = () => {\n  return getPhones()\n    .then(phones => {\n      const getDetailsPromises = [];\n\n      phones.forEach(({ id }) =>\n        getDetailsPromises.push(getDetails(id))\n      );\n\n      return Promise.allSettled(getDetailsPromises);\n    });\n};\n\n// Gets all phones' details by ids from API\n// Additionally stores data to array preserving order of received responses\nconst getDetailsOrdered = (phoneId, resultsOrdered) => {\n  return new Promise((resolve, reject) => {\n    getDetails(phoneId)\n      .then(details => {\n        resultsOrdered.push(details);\n        resolve(details);\n      })\n      .catch(reject);\n  });\n};\n\n// Gets only first received phone's details by id from API\nconst getFirstReceivedDetails = () => {\n  return getPhones()\n    .then(phones => {\n      const getDetailsPromises = [];\n\n      phones.forEach(({ id }) =>\n        getDetailsPromises.push(getDetails(id))\n      );\n\n      return Promise.race(getDetailsPromises);\n    });\n};\n\n// Gets all successful received phones' details by ids from API\nconst getAllSuccessfulDetails = () => {\n  return getPhonesDetails()\n    .then(results =>\n      results\n        .filter(result => result.status === 'fulfilled')\n        .map(({ value }) => value)\n    );\n};\n\n// Gets only three fastest received phones' details by ids from API\nconst getThreeFastestDetails = () => {\n  return new Promise((resolve, reject) => {\n    getPhones()\n      .then(phones => {\n        const getDetailsPromises = [];\n        const resultsOrdered = [];\n\n        phones.forEach(({ id }) =>\n          getDetailsPromises.push(getDetailsOrdered(id, resultsOrdered))\n        );\n\n        Promise\n          .allSettled(getDetailsPromises)\n          .then(() => resolve(resultsOrdered.slice(0, 3)))\n          .catch(reject);\n      });\n  });\n};\n\n// Adds received phones' details to page\nconst addPhonesList = (title, className, phonesList) => {\n  waitingMessage.remove();\n\n  const container = document.createElement('div');\n\n  container.className = className;\n  container.innerHTML = `<h2>${title}</h2>`;\n\n  const list = document.createElement('ul');\n\n  container.append(list);\n  document.body.append(container);\n\n  phonesList.forEach(phone => {\n    list.insertAdjacentHTML('beforeend', `\n      <li>${phone.name} <span hidden>${phone.id.toUpperCase()}</span></li>\n    `);\n  });\n};\n\n// Shows waiting message\nconst waitingMessage = document.createElement('p');\n\nwaitingMessage.textContent = 'Fetching phones...';\ndocument.body.append(waitingMessage);\n\n// Task #1 solution\ngetFirstReceivedDetails()\n  .then(firstPhone => {\n    addPhonesList(\n      'First Received',\n      'first-received',\n      [firstPhone],\n    );\n  })\n  .catch(error => {\n    alert(error.message);\n  });\n\n// Task #2 solution\ngetAllSuccessfulDetails()\n  .then(allPhones => {\n    addPhonesList(\n      'All Successful',\n      'all-successful',\n      allPhones,\n    );\n  })\n  .catch(error => {\n    alert(error.message);\n  });\n\n// Task #3 solution\ngetThreeFastestDetails()\n  // eslint-disable-next-line no-console\n  .then(phones => console.log(phones));\n"]}